#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspNet")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFootBall(FootBall instance);
    partial void UpdateFootBall(FootBall instance);
    partial void DeleteFootBall(FootBall instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["aspNetConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FootBall> FootBalls
		{
			get
			{
				return this.GetTable<FootBall>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FootBall")]
	public partial class FootBall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchId;
		
		private string _TeamName1;
		
		private string _TeamName2;
		
		private string _Matchresult;
		
		private string _WinningTeam;
		
		private int _Points;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(int value);
    partial void OnMatchIdChanged();
    partial void OnTeamName1Changing(string value);
    partial void OnTeamName1Changed();
    partial void OnTeamName2Changing(string value);
    partial void OnTeamName2Changed();
    partial void OnMatchresultChanging(string value);
    partial void OnMatchresultChanged();
    partial void OnWinningTeamChanging(string value);
    partial void OnWinningTeamChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
		
		public FootBall()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName1", DbType="NVarChar(50)")]
		public string TeamName1
		{
			get
			{
				return this._TeamName1;
			}
			set
			{
				if ((this._TeamName1 != value))
				{
					this.OnTeamName1Changing(value);
					this.SendPropertyChanging();
					this._TeamName1 = value;
					this.SendPropertyChanged("TeamName1");
					this.OnTeamName1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName2", DbType="NVarChar(50)")]
		public string TeamName2
		{
			get
			{
				return this._TeamName2;
			}
			set
			{
				if ((this._TeamName2 != value))
				{
					this.OnTeamName2Changing(value);
					this.SendPropertyChanging();
					this._TeamName2 = value;
					this.SendPropertyChanged("TeamName2");
					this.OnTeamName2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Matchresult", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Matchresult
		{
			get
			{
				return this._Matchresult;
			}
			set
			{
				if ((this._Matchresult != value))
				{
					this.OnMatchresultChanging(value);
					this.SendPropertyChanging();
					this._Matchresult = value;
					this.SendPropertyChanged("Matchresult");
					this.OnMatchresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinningTeam", DbType="NVarChar(50)")]
		public string WinningTeam
		{
			get
			{
				return this._WinningTeam;
			}
			set
			{
				if ((this._WinningTeam != value))
				{
					this.OnWinningTeamChanging(value);
					this.SendPropertyChanging();
					this._WinningTeam = value;
					this.SendPropertyChanged("WinningTeam");
					this.OnWinningTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
